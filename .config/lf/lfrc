# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

set color256 true
set icons true
set ignorecase true
set drawbox true
set sixel true


set previewer ~/.config/lf/pv.sh
map i $~/.config/lf/pv.sh $f | less -R

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeo $f
map O $mimeopen --ask $f

map <a-c> clear

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        audio/*) mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f ;;
        application/pdf) setsid zathura $fx >/dev/null 2>&1 & ;;
        application/zip) setsid unzip -l $f | less;;
        application/rar) setsid unrar l $f | less;;
        image/gif)  setsid mpv $f --loop=inf ;;
        image/jpeg) setsid imv $f ;;
        image/png) setsid imv $f ;;
        image/*) setsid imv $f ;;
        video/*) setsid mpv $f --loop=inf ;;
        application/json) $EDITOR $f;;
        application/vnd.microsoft.portable-executable) distrobox-host-exec flatpak run com.usebottles.bottles $f;; 
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
#%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; trash-put -rf $fx

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && srm -rf $fx
}}

# use '<backspace2>' key for either 'trash' or 'delete' command
 map <backspace2> trash
 map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    compress.sh -e "$fx"
}}

cmd compress ${{
    compress.sh -c "$fx"
}}

map c compress $fx 
map C extract $f
